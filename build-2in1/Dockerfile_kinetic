# use ubuntu 16.04 because we want to use ROS kinetic
ARG TARGET="gpu"
FROM nvidia/cuda:10.2-cudnn7-devel-ubuntu16.04 as gpu
FROM ubuntu:16.04 as cpu

# FROM ros:kinetic
LABEL maintainer "Sebastian Ruiz <sruiz@mailbox.org>"

SHELL ["/bin/bash","-c"]

################################################################
## BEGIN: ros:core
################################################################

# install packages
RUN apt update && apt install -q -y --no-install-recommends \
    dirmngr \
    gnupg2 \
    && rm -rf /var/lib/apt/lists/*

# setup keys
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654

# setup sources.list
RUN echo "deb http://packages.ros.org/ros/ubuntu xenial main" > /etc/apt/sources.list.d/ros1-latest.list

# setup environment
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

ENV ROS_DISTRO kinetic

################################################################
## END: ros:core
## BEGIN: ros:kinetic
################################################################

# install ros packages
RUN apt update && apt install --no-install-recommends -y \
    ros-kinetic-ros-core=1.3.2-0* \
    build-essential \
    python-rosdep \
    python-rosinstall \
    python-vcstools \
    python-catkin-tools \
    ros-kinetic-cv-bridge \
    vim \
    && rm -rf /var/lib/apt/lists/*

# bootstrap rosdep
RUN rosdep init && \
  rosdep update --rosdistro $ROS_DISTRO

# install ros packages
RUN apt update && apt install -y --no-install-recommends \
    ros-kinetic-ros-base=1.3.2-0* \
    && rm -rf /var/lib/apt/lists/*

################################################################
## END: ros:kinetic
## BEGIN: anaconda3
################################################################

# ENV PATH /opt/conda/bin:$PATH

RUN apt update && apt install -y \
    software-properties-common
RUN add-apt-repository universe

RUN apt update --fix-missing && apt install -y wget bzip2 ca-certificates zlib1g-dev libncurses5-dev libgdbm-dev \
    libglib2.0-0 libxext6 libsm6 libxrender1 libffi-dev \
    git

RUN wget https://www.python.org/ftp/python/3.8.13/Python-3.8.13.tgz
RUN tar -xf Python-3.8.13.tgz \
    && cd Python-3.8.13 \
    && ./configure --enable-optimizations

RUN cd Python-3.8.13 && make -j 16 \
    && make install

RUN apt update && apt install -y python3-pip
RUN pip3 install --upgrade pip
RUN pip3 install torch torchvision rich matplotlib numpy pillow scikit-learn scipy tensorboard pyyaml opencv-python regex natsort shapely commentjson pycocotools cython scikit-image pyrealsense2 hdbscan
RUN pip3 install lap cython_bbox

RUN apt install -y libpcre2-dev
COPY swig-4.0.2.tar.gz /
RUN tar -xf /swig-4.0.2.tar.gz
RUN cd /swig-4.0.2 && ./configure --without-pcre && make && make install

COPY pylon_6.3.0.23157-deb0_amd64.deb /
RUN dpkg -i pylon_6.3.0.23157-deb0_amd64.deb && apt install -f

RUN git clone https://github.com/basler/pypylon.git
RUN cd pypylon \
    && pip3 install .

################################################################
## END: anaconda3
################################################################

# trying to get glibc running because it is required for open3d.
# not working, so instead, not using open3d for now
# https://stackoverflow.com/a/55663007
# RUN apt install -y gawk bison

# COPY glibc-2.27.tar.gz /
# RUN tar -xf /glibc-2.27.tar.gz
# RUN cd /glibc-2.27 \
#     && mkdir build \
#     && cd build \
#     && ../configure --prefix=/opt/glibc-2.27 \
#     && make -j8 \
#     && make install

# COPY patchelf-0.14.5-x86_64.tar.gz /
# # this run commands untars the executable into /bin folder
# RUN tar -xf /patchelf-0.14.5-x86_64.tar.gz
# RUN patchelf --set-interpreter /opt/glibc-2.27/lib/ld-linux-x86-64.so.2 --set-rpath /opt/glibc-2.27/lib/ /usr/local/bin/python3
################################################################


# Create local catkin workspace
ENV CATKIN_WS=/root/catkin_ws
ENV ROS_PYTHON_VERSION=3
RUN mkdir -p $CATKIN_WS/src/ros_vision_pipeline
WORKDIR $CATKIN_WS


COPY ros_vision_pipeline $CATKIN_WS/src/ros_vision_pipeline

# Initialize local catkin workspace
RUN source /opt/ros/${ROS_DISTRO}/setup.bash \
    && cd $CATKIN_WS \
    && rosdep install -y --from-paths . --ignore-src --rosdistro ${ROS_DISTRO}

RUN update-alternatives --remove python /usr/bin/python \
    && update-alternatives --install /usr/bin/python python /usr/local/bin/python3 10

# required for pyrealsense2
RUN apt install -y libusb-1.0-0-dev
RUN pip3 install rospkg

########## realsense install

RUN apt install -y apt-transport-https
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE || sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE \
    && add-apt-repository "deb https://librealsense.intel.com/Debian/apt-repo $(lsb_release -cs) main" -u
RUN apt install -y librealsense2-dkms librealsense2-utils librealsense2-dev usbutils

########## end realsense install

RUN source /opt/ros/${ROS_DISTRO}/setup.bash \
    && cd $CATKIN_WS \
    && catkin init \
    # && catkin config -DPYTHON_EXECUTABLE=/usr/local/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/local/include/python3.8 -DPYTHON_LIBRARY=/usr/local/lib/libpython3.8.a \
    && catkin config --install \
    && cd src \
    && git clone -b kinetic https://github.com/ros-perception/vision_opencv.git

# cv_bridge fix
RUN sed -i 's/python3/python-py35/g' src/vision_opencv/cv_bridge/CMakeLists.txt

RUN source /opt/ros/${ROS_DISTRO}/setup.bash \
    && cd $CATKIN_WS \
    && catkin build cv_bridge -DSETUPTOOLS_DEB_LAYOUT=OFF \ 
    # I was getting some error without -DSETUPTOOLS_DEB_LAYOUT=OFF
    && source install/setup.bash --extend

# install ros_vision_pipeline
RUN source /opt/ros/${ROS_DISTRO}/setup.bash \
    && catkin build ros_vision_pipeline
    # && catkin install
    # catkin install doesn't seem to do anything?

# ROS breaks opencv because python3 will try and default to the python2.7 version of opencv. Delete it.
RUN rm /opt/ros/kinetic/lib/python2.7/dist-packages/cv2.so

# Always source ros_catkin_entrypoint.sh when launching bash (e.g. when attaching to container)
RUN echo "source /entrypoint.sh" >> /root/.bashrc

COPY ./entrypoint.sh /
RUN chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]

# # stop docker from exiting immediately
CMD tail -f /dev/null
