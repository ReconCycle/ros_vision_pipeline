version: '2.4' # 3.8

services:
  #ros-master:
  #  container_name: ros-master
  #  ports: # not necessary, works fine without, only required for host mode 
  #    - 11311:11311
  #  image: ros:kinetic
  #  command: stdbuf -o L roscore
  #  networks:
  #    - ros
  #  restart: unless-stopped

  #novnc:
  #  image: theasp/novnc:latest
  #  container_name: novnc
  #  environment:
  #    # Adjust to your screen size
  #    - DISPLAY_WIDTH=1600
  #    - DISPLAY_HEIGHT=968
  #    - RUN_XTERM=no
  #  ports:
  #    - "8080:8080"
  #  networks:
  #    - ros
  #  restart: unless-stopped

  #ros-rviz:
  #  container_name: ros-rviz
  #  build: ./build-rviz
  #  depends_on:
  #    # - ros-master
  #    - novnc
  #  stdin_open: true # docker run -i
  #  tty: true        # docker run -t
  #  environment:
  #    - "ROS_MASTER_URI=http://reconcycle-dev1:11311"
  #    - "ROS_HOSTNAME=ros-rviz" # must be the container_name
  #    - DISPLAY=novnc:0.0
  #  command: stdbuf -o L rosrun rviz rviz
  #  networks:
  #    - ros
  #  restart: unless-stopped

  ros-vision-pipeline:
    container_name: ros-vision-pipeline
    # build depends on if you want CUDA support, which is only available with an nvidia GPU.
    # export DOCKER_BUILDKIT=1 # or configure in daemon.json
    # docker-compose build --build-arg 'TARGET=gpu'
    # or:
    # docker-compose build --build-arg 'TARGET=cpu'
    build:
      context: ./build-2in1
      args: 
        TARGET: cpu # cpu or gpu

    # get output from python scripts to docker log using stdin_open and tty
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    # depends_on:
    #   - ros-master
    environment:
      # to get computer hostname run: hostname -I 
      # only use IP addresses with docker
      # - "ROS_MASTER_URI=http://192.168.2.20:11311"
      # - "ROS_HOSTNAME=192.168.2.20"
      #
      # For ros master on reconcycle-dev2:
      - ROS_MASTER_URI=http://10.20.0.1:11311
      - ROS_IP=10.20.0.2 # $ hostname -I
      # 
      # If the computer has CUDA support:
      # - NVIDIA_VISIBLE_DEVICES=0
      # - NVIDIA_DRIVER_CAPABILITIES=all
    volumes:
      - $HOME/reconcycle/vision-pipeline:/root/vision-pipeline
    network_mode: host # workaround to use the camera
    command: python ros_pipeline.py --publish_continuously=True
    # networks:
    #   - ros
    restart: unless-stopped

  #ros-image-publisher:
  #  container_name: ros-image-publisher
  #  build:
  #    context: ./build-2in1
  #    args: 
  #      TARGET: cpu # cpu or gpu
  #  # get output from python scripts to docker log using stdin_open and tty
  #  stdin_open: true # docker run -i
  #  tty: true        # docker run -t
  #  # depends_on:
  #  #   - ros-master
  #  environment:
  #    # to get computer hostname run: hostname -I 
  #    # only use IP addresses with docker
  #    # - "ROS_MASTER_URI=http://192.168.2.20:11311"
  #    # - "ROS_HOSTNAME=192.168.2.20"
  #    #
  #    # For ros master on reconcycle-dev2:
  #    - ROS_MASTER_URI=http://172.17.0.1:11311
  #    - ROS_IP=172.17.0.1 # $ hostname -I
  #  volumes:
  #    - $HOME/projects/reconcycle/vision-pipeline:/root/vision-pipeline
  #    - $HOME/datasets/labelme/2022-02-17_kalo_tracking:/root/images
  #  network_mode: host # workaround to use the camera
  #  command: python ros_image_publisher.py --img_folder=/root/images
    # networks:
    #   - ros
  #  restart: unless-stopped

networks:
  ros:
    driver: bridge
